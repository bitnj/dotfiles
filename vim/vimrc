"==============================================================================
"                                    vimrc
"==============================================================================
"
" Author: Neil Seas
" Repo: https://github.com/bitnj/dotfiles
"
" -----------------------------------------------------------------------------

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" use python3
let g:pymode_python = 'python3'



" Vundle
set nocompatible
filetype off

" lilypond settings.  Lilypond is musical notation software.
set runtimepath+=/usr/local/share/lilypond/current/vim

" Vundle Plug-in manager.
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'             				" auto completion
Plugin 'tpope/vim-surround'                 				" for editing surround tags
Plugin 'tpope/vim-repeat'                   				" extends . command to plugins
Plugin 'tpope/vim-commentary'               				" shortcuts for adding comments
Plugin 'tpope/vim-fugitive'						" perform basic git commands without leaving VIM
Plugin 'scrooloose/nerdtree'						" file tree
Plugin 'ctrlpvim/ctrlp.vim'                 				" fuzzy finder
Plugin 'tmhedberg/SimpylFold'						" helps with folding methods and classes
Plugin 'vim-scripts/indentpython.vim'					" auto-indentation for python
Plugin 'dense-analysis/ale'						" asynchronous syntax checking
Plugin 'nvie/vim-flake8'						" PEP 8 checking
Plugin 'pangloss/vim-javascript'            				" syntax highlighting for JavasScript
Plugin 'tomlion/vim-solidity'						" syntax highlighting for Solidity (Ethereum)
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}		" status bar for displaying current virtualenv, git branch etc

" all of your Plugins must be added before the following line
call vundle#end()           " required
filetype plugin indent on   "required
filetype on

" Enable folding to collapse methods and classes
set foldmethod=indent
set foldlevel=99

" enable folding with the spacebar
nnoremap <space> za

" show docstrings in folded code
let g:SimplyFold_docstring_preview=1

" PEP 8 indentation
au BufNewFile,BufRead *.py
			\ set tabstop=4 |
			\ set softtabstop=4 |
			\ set shiftwidth=4 |
			\ set textwidth=79 |
			\ set expandtab |
			\ set autoindent |
			\ set fileformat=unix

" for other languages
au BufNewFile,BufRead *.js,*.html,*.css
			\ set tabstop=2 |
			\ set softtabstop=2 |
			\ set shiftwidth=2

" flag unnecessary whitespace
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" UTF-8
set encoding=utf-8

" Make CtrlP use ag (ie silver_searcher) for listing the files
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g'
let g:ctrlp_use_caching = 0

" <leader> is \
" Shortcut to vimrc.  Opens in a new tab
nmap <leader>vi :tabe $MYVIMRC<cr>
" Reload vimrc without having to close and re-open Vim
nmap <leader>so :source $MYVIMRC<cr>
" Map 0 to start of text on a line instead of column 0
nmap 0 ^
" Shortcut for the nohlsearch command
nmap <leader>h :nohlsearch<cr>


" Tell YouCompleteMe to pass the filetype to the function
let g:ycm_extra_conf_vim_data = [ '&filetype' ]
" Disable asking for comfirmation
let g:ycm_confirm_extra_conf = 0
" close the preview window after completion
let g:ycm_autoclose_preview_window_after_completion=1
" goto definition of whatever is under the cursor
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>


" support for Python and Virtualenv
py3 << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
	project_base_dir = os.environ['VIRTUAL_ENV']
	activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
	execfile(activate_this, dict(__file__=activate_this))
EOF


" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible


let python_highlight_all=1

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

" Search configuration
set incsearch   " Highlight while searching
set hlsearch    " Highlight all matches after entering search pattern

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" Default to showing line numbers
set number		" Show line numbers by default

" sets point at which text will wrap and highlights area to the right
set textwidth=120
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%121v.\+/

" show existing tab with 4 spaces width
set tabstop=4
set softtabstop=4
set autoindent

" allow for copy from Vim to clipboard
set clipboard=unnamed
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set noexpandtab

" Search down into subfolders
" Provides tab completion for all file-related tasks
set path+=**

"Display all matching files when we tab complete
set wildmenu

" newrw tweaks for file browsing
let g:netrw_banner=1            " disable banner
let g:netrw_browses_split=4     " open in prior window
let g:netrw_altv=1              " open splits to the right
let g:netrw_liststyles=3        " tree view
" let g:netrw_list_hide.=',\(^\|\s\s)\zs\.\S\+'
" let g:netrw_list_hide=netrw_gitignore#Hide()

" NOW WE CAN
"  - :edit a folder to open a file browser
"  - <CR>/v/t top open in an h-split/v-split/tab
"  - check |netrw-browse-maps| for more mappings

" TAG JUMPING
" Create the 'tags' file (may need to install ctags first)
" command! MakeTags !ctags -R .

" NOW WE CAN
"  - USE ^] to jump to tag under cursor
"  - Use g^] for ambigous tags
"  - Use ^t to jump back up the tag stack
